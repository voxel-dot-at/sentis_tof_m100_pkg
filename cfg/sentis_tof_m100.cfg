#! /usr/bin/env python
# Sentis_Tof_M100 camera configuration

PACKAGE='sentis_tof_m100'
import roslib; roslib.load_manifest(PACKAGE)

#from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#Note: Reconfiguration level is currently set to 0 for all the parameters, assuming that the parameters can be changed when the sensor is running....

#       Name			Type      	Reconfiguration level   Description	Default    	Min   	Max

gen.add("Integration_Time",	int_t,	0, "Integration time(in usec) for the sensor",1500,	50,7000)
gen.add("Modulation_Frequency",	int_t,	0,"Set the modulation frequency(Hz) of the sensor. By Default the frequency closest to the given value will be set.",20000,5000,30000)
gen.add("Frame_Rate",	int_t,	0, "Integration time(in usec) for the sensor",40,	1,45)

gen.add("MedianFilter",bool_t,	0,"Median Filter", True)
gen.add("AverageFilter",bool_t,0,"Average Filter", False)
gen.add("GaussFilter",bool_t,	0,"Gauss Filter", False)
gen.add("SlidingAverage",bool_t,0,"Sliding Average", False)
gen.add("WigglingCompensation",bool_t,0,"Wiggling Compensation", True)
gen.add("FPPNCompensation",bool_t,0,"FPPN compensation", True)
gen.add("ModFreqScaling",bool_t,0,"ModFreq Scaling", True)
gen.add("Scalingmm",bool_t,0,"Scaling to [mm]", True)
gen.add("AdditiveOffset",bool_t,0,"Additive Offset", True)
gen.add("TemperatureCompensation",bool_t,0,"Temperature Compensation", True)
gen.add("ScalingDistCalibGradient",bool_t,0,"scaling via register DistCalibGradient ", False)
gen.add("ScalingDistCalibOffset",bool_t,0,"scaling via register DistCalibOffset", True)

gen.add("FilterMedian_Config",	int_t,	0, "FilterMedianConfig",	1,1,255)
gen.add("FilterAverage_Config_Pixels",	bool_t,	0, "FilterAverageConfig (unset:3x3 Pixel | set:5x5 Pixel)",	False)
gen.add("FilterAverage_Config_Iters",	int_t,	0, "FilterAverageConfig",	1,1,255)
gen.add("FilterGauss_Config_Pixels",	bool_t,	0, "FilterGaussConfig (unset:3x3 Pixel | set:5x5 Pixel)",False)
gen.add("FilterGauss_Config_Iters",	int_t,	0, "FilterGaussConfig",	1,1,255)
gen.add("FilterSLAF_config",	int_t,	0, "FilterSLAFconfig",	5,1,255)

gen.add("Amplitude_Filter_On",bool_t,	0,"Whether to apply amplitude filter or not. Image pixels with amplitude values less than the threshold will be filtered out", False)
gen.add("Amplitude_Threshold",	double_t,	0,"What should be the amplitude filter threshold. Image pixels with lesser aplitude values will be filtered out. Amplitude Filter Status should be true to use this filter.",0,0,2500)

exit(gen.generate(PACKAGE, "sentis_tof_m100", "sentis_tof_m100"))

